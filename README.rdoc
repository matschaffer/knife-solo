= knife-solo

{<img src="https://secure.travis-ci.org/matschaffer/knife-solo.png" alt="Build Status" />}[http://travis-ci.org/matschaffer/knife-solo]
{<img src="https://codeclimate.com/badge.png" />}[https://codeclimate.com/github/matschaffer/knife-solo]

== DESCRIPTION:

Knife-solo is a gem plugin for Chef's knife utility. It currently adds 5 subcommands to knife:

- <tt>knife solo init</tt> is used to create a new directory structure (i.e. "kitchen") that fits with chef's standard structure and can be used to build and store recipes.

- <tt>knife solo prepare</tt> installs Ruby, RubyGems and Chef on a given host. It's structured to auto-detect the target OS and change the installation process accordingly.

- <tt>knife solo cook</tt> uploads the current kitchen (chef repo) to the target host and runs chef-solo on that host.

- <tt>knife solo bootstrap</tt> combines the two previous ones (prepare and cook).

- <tt>knife solo clean</tt> removes the uploaded kitchen from the target host.

Preliminary Windows support for "knife solo cook" is available (see below).

== USAGE:

Installation is a normal gem installation.

    gem install knife-solo

If you need to install from git run:

    rake install

=== Init command

The init command simply takes a name of the directory to store the kitchen structure. Use "." to initialize the current directory.

    knife init mychefrepo

Currently the directory structure looks like this, but could change as development continues.

    mychefrepo/
    ├── cookbooks
    ├── data_bags
    ├── nodes
    ├── roles
    ├── site-cookbooks
    └── solo.rb

=== Prepare command

The prepare command takes an ssh-style host argument as follows:

    knife solo prepare ubuntu@10.0.0.201

It will look up SSH information from <tt>~/.ssh/config</tt> or in the file specified by +-F+. You can also pass port information (+-p+), identity information (+-i+), or a password (+-P+). It will use sudo to run some of these commands and will prompt you for the password if it's not supplied on the command line.

This command will make a best-effort to detect and install Chef-solo on your target operating system. We use the {Opscode Installer}[http://www.opscode.com/chef/install/] wherever possible.

If you need specific behavior you can fallback to a knife bootstrap command with an empty runlist using the following:

    knife bootstrap --template-file bootstrap.centos.erb -u root 172.16.144.132
    echo '{"run_list":[]}' > nodes/172.16.144.132.json

Bootstrap templates are quite simple, as shown in {this gist for bootstrap.centos.erb}[https://gist.github.com/2402433].

Or if your modifications provide some general benefit, consider sending a pull request to {this project}[https://github.com/matschaffer/knife-solo] or {the omnibus installer}[https://github.com/opscode/omnibus].

=== Cook command

The cook command also takes an ssh-style host argument:

    knife solo cook ubuntu@10.0.0.201

The cook command uploads the current kitchen to the server and runs chef-solo on that server. If you only specify one argument it will look for a node config in <tt>nodes/<hostname>.json</tt>. Or if you want to specify a node config you can pass the path to the file as the second argument.

This uploads all of your cookbooks in addition to a patch that allows you to use data_bags in a read-only fashion from the +data_bags+ folder.

This also supports encrypted data bags. To use them, place your key in +data_bag_key+ in the root of your kitchen (or if you move it make sure to update +solo.rb+ to reflect the new path).

The knife command for creating encrypted data bags doesn't work well without a Chef server, so use {this gist}[https://gist.github.com/2896172] as an example on how to create encrypted data bag items on your local file system.

=== Bootstrap command

The bootstrap command takes the same arguments and most of the options as prepare and cook:

    knife solo bootstrap ubuntu@10.0.0.201

Under the hood it first calls +knife solo prepare+ and then +knife solo cook+ with the specified arguments and options.

=== Clean command

The clean command takes the same arguments like prepare and cook:

    knife solo clean ubuntu@10.0.0.201

The clean command removes an uploaded kitchen completely from the target host. This improves security because passwords etc. are not left behind on that host.

=== Windows support

The cook command will work on Windows node if you meet the following howto:

==== Init then tweak

- run <tt>knife solo init</tt> then edit solo.rb to use Windows path-naming (see https://gist.github.com/1773854)

==== Prepare the node manually

- install a SSH server (eg: WinSSHd)
- install rsync on the node (see https://github.com/thbar/rsync-windows)
- add rsync to the user PATH
- install http://www.opscode.com/chef/install.msi
- add nodes/hostname.json and put <tt>{ "run_list": [] }</tt> in it

==== Cook

- cook should work as expected automatically, if you use cygwin rsync

== DEVELOPMENT

Get set up by running +./script/newb+ this will do some of the steps and guide you through the rest. If it doesn't run for you, feel free to {file an issue}[https://github.com/matschaffer/knife-solo/issues].

When running integration tests all output is sent to the log directory into a file that matches matches the test case name. The EC2Runner log is the main runner log that contains information about instance provisioning.

Note that instances will remain running until your tests pass. This aids in speeding up the test cycle. Upon succesfful test completion you'll be given 10 seconds to cancel the process before the instances are cleaned up. Note that any instance tagged with <tt>knife_solo_integration_user == $USER</tt> will be cleaned up. Or if you want to leave your instances running regardless, specify <tt>SKIP_DESTROY=true</tt> as an environment variable.

To make an integration test, create a file in the +test/integration+ directory and a test class that inherits from +IntegrationTest+ and includes a module from +test/integration/cases+. You can override methods as necessary, but generally you only need to override +user+ and +image_id+ to specify the user name and AMI ID.

If you're interested in contributing, contact me via GitHub or have a look at the {GitHub issues page}[https://github.com/matschaffer/knife-solo/issues].
